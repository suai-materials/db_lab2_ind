using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace SuperDBApp;

public partial class TableView : Page
{
    private string tableName;
    private List<DataGridColumn> _toDelete = new();

    public TableView()
    {
        InitializeComponent();
    }

    public TableView(string tableName = "") : this()
    {
        this.tableName = tableName;
        // Я люблю C#.(нет)
        switch (tableName)
        {
            case "Сотрудники":
                DataG.ItemsSource = Constants.DbDataContext.Employees.ToList();
                break;
            case "Компоненты":
                DataG.ItemsSource = Constants.DbDataContext.Components.ToList();
                break;
            case "Должности":
                DataG.ItemsSource = Constants.DbDataContext.Positions.ToList();
                break;
            case "Заказы":
                DataG.ItemsSource = Constants.DbDataContext.Orders.ToList();
                break;
            case "Сервисы":
                DataG.ItemsSource = Constants.DbDataContext.Services.ToList();
                break;
            case "Заказчики":
                DataG.ItemsSource = Constants.DbDataContext.Customers.ToList();
                break;
            case "Заказчики и их заказы":
                DataG.ItemsSource = Constants.DbDataContext.CustomerOrders.ToList();
                break;
            case "Производитель и компоненты":
                DataG.ItemsSource = Constants.DbDataContext.Manufacture2Components.ToList();
                break;
        }
    }

    private void TheDataGrid_OnAutoGeneratingColumn(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        Console.WriteLine();
        if (e.PropertyType.AssemblyQualifiedName!.Contains("System.Collections.Generic") ||
            e.PropertyType.AssemblyQualifiedName!.Contains("DbContext"))
        {
            _toDelete.Add(e.Column);
        }
    }

    private void OnEdit(object? sender, EventArgs e)
    {
        switch (tableName)
        {
            case "Сотрудники":
                Constants.Frame.Navigate(new AddEmployee(Constants.DbDataContext.Employees.Find((long) ((Button) sender!).Tag)!));
                break;
        }
    }

    private void DataG_OnAutoGeneratedColumns(object? sender, EventArgs e)
    {
        foreach (var dataGridColumn in _toDelete)
        {
            DataG.Columns.Remove(dataGridColumn);
        }

        DataGridTemplateColumn dataGridColTem = new DataGridTemplateColumn();
        DataTemplate dataTemplate = new();
        FrameworkElementFactory factory1 = new FrameworkElementFactory(typeof(Button));
        factory1.SetValue(Button.ContentProperty, "Изменить");
        factory1.AddHandler(Button.ClickEvent, new RoutedEventHandler(OnEdit));
        Binding binding = new("Id");
        binding.Mode = BindingMode.Default;
        factory1.SetValue(Button.TagProperty, binding);
        dataTemplate.VisualTree = factory1;
        dataGridColTem.CellTemplate = dataTemplate;
        
        DataG.Columns.Add(dataGridColTem);
    }
}